name: Build Android APK
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Cache Buildozer global directory
      uses: actions/cache@v3
      with:
        path: ~/.buildozer
        key: buildozer-${{ hashFiles('buildozer.spec') }}
        restore-keys: |
          buildozer-
      
    - name: Cache Buildozer local directory
      uses: actions/cache@v3
      with:
        path: .buildozer
        key: buildozer-local-${{ hashFiles('buildozer.spec') }}-${{ hashFiles('**/*.py') }}
        restore-keys: |
          buildozer-local-${{ hashFiles('buildozer.spec') }}-
          buildozer-local-
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          git \
          zip \
          unzip \
          openjdk-11-jdk \
          autoconf \
          libtool \
          pkg-config \
          zlib1g-dev \
          libncurses5-dev \
          libncursesw5-dev \
          cmake \
          libffi-dev \
          libssl-dev \
          python3-pip \
          python3-setuptools
          
    - name: Install Buildozer
      run: |
        python -m pip install --upgrade pip
        pip install buildozer
        pip install cython==0.29.33
        
    - name: Fix buildozer.spec conflicts
      run: |
        echo "üîß Correction des conflits dans buildozer.spec..."
        
        # Supprimer version.regex si version existe
        if grep -q "^version = " buildozer.spec && grep -q "version.regex" buildozer.spec; then
          echo "‚ö†Ô∏è  Suppression de version.regex (conflit avec version)"
          sed -i '/version.regex/d' buildozer.spec
          sed -i '/version.filename/d' buildozer.spec
        fi
        
        # Remplacer android.bootstrap par p4a.bootstrap
        if grep -q "android.bootstrap" buildozer.spec; then
          echo "‚ö†Ô∏è  Remplacement de android.bootstrap par p4a.bootstrap"
          sed -i 's/android.bootstrap/p4a.bootstrap/g' buildozer.spec
        fi
        
        # Remplacer android.arch par android.archs (nouveau format)
        if grep -q "android.arch = " buildozer.spec; then
          echo "‚ö†Ô∏è  Remplacement de android.arch par android.archs"
          sed -i 's/android.arch = /android.archs = /g' buildozer.spec
        fi
        
        # Supprimer android.sdk (deprecated)
        if grep -q "^android.sdk = " buildozer.spec; then
          echo "‚ö†Ô∏è  Suppression de android.sdk (deprecated)"
          sed -i '/^android.sdk = /d' buildozer.spec
        fi
        
        # Forcer les versions stables
        if ! grep -q "android.api = " buildozer.spec; then
          echo "android.api = 33" >> buildozer.spec
        fi
        if ! grep -q "android.minapi = " buildozer.spec; then
          echo "android.minapi = 21" >> buildozer.spec
        fi
        if ! grep -q "android.ndk = " buildozer.spec; then
          echo "android.ndk = 25b" >> buildozer.spec
        fi
        if ! grep -q "android.archs = " buildozer.spec; then
          echo "android.archs = arm64-v8a, armeabi-v7a" >> buildozer.spec
        fi
        
        echo "‚úÖ buildozer.spec corrig√©"
        

    - name: Setup Android SDK environment
      run: |
        echo "üîß Configuration de l'environnement Android SDK..."
        
        # Cr√©er le r√©pertoire SDK
        mkdir -p $HOME/.buildozer/android/platform/android-sdk
        
        # T√©l√©charger et installer les outils en ligne de commande Android
        cd $HOME/.buildozer/android/platform
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O commandlinetools.zip
        unzip -q commandlinetools.zip
        mkdir -p android-sdk/cmdline-tools
        mv cmdline-tools android-sdk/cmdline-tools/latest
        
        # Cr√©er le r√©pertoire tools avec un lien symbolique pour la compatibilit√© avec buildozer
        mkdir -p android-sdk/tools/bin
        ln -s ../../cmdline-tools/latest/bin/sdkmanager android-sdk/tools/bin/sdkmanager
        ln -s ../../cmdline-tools/latest/bin/avdmanager android-sdk/tools/bin/avdmanager
        
        # D√©finir les variables d'environnement
        export ANDROID_HOME=$HOME/.buildozer/android/platform/android-sdk
        export ANDROID_SDK_ROOT=$HOME/.buildozer/android/platform/android-sdk
        export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools
        
        echo "ANDROID_HOME=$HOME/.buildozer/android/platform/android-sdk" >> $GITHUB_ENV
        echo "ANDROID_SDK_ROOT=$HOME/.buildozer/android/platform/android-sdk" >> $GITHUB_ENV
        echo "PATH=$PATH:$HOME/.buildozer/android/platform/android-sdk/cmdline-tools/latest/bin:$HOME/.buildozer/android/platform/android-sdk/platform-tools" >> $GITHUB_ENV
        
        # Installer les composants SDK n√©cessaires
        echo "üì¶ Installation des composants SDK..."
        yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses || true
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "platform-tools" "platforms;android-33" "build-tools;33.0.0"
        
        # V√©rifier que tout est en place
        echo "‚úÖ V√©rification de l'installation..."
        ls -la $ANDROID_HOME/tools/bin/
        ls -la $ANDROID_HOME/build-tools/
        
        echo "‚úÖ Android SDK configur√©"
        
    - name: Build APK
      run: |
        mkdir -p bin
        
        # D√©finir les variables d'environnement pour le build
        export ANDROID_HOME=$HOME/.buildozer/android/platform/android-sdk
        export ANDROID_SDK_ROOT=$HOME/.buildozer/android/platform/android-sdk
        
        echo "üèóÔ∏è  D√©marrage de la construction de l'APK..."
        echo "üìù Mode verbeux d√©sactiv√© pour r√©duire la taille des logs"
        
        # Build sans mode verbeux pour r√©duire les logs
        buildozer android debug 2>&1 | tee build.log | grep -E "(^\[|Error|error|ERROR|Warning|warning|WARNING|‚úì|‚úó|Failed|failed|Success|APK)"
        
        BUILD_EXIT_CODE=${PIPESTATUS[0]}
        
        if [ $BUILD_EXIT_CODE -eq 0 ] && ls bin/*.apk 1> /dev/null 2>&1; then
          echo "‚úÖ APK cr√©√© avec succ√®s"
          ls -lh bin/
          
          # Renommer l'APK avec la date
          APK_FILE=$(ls bin/*.apk | head -n 1)
          NEW_NAME="bin/LeTousgestions-$(date +%Y%m%d-%H%M%S).apk"
          cp "$APK_FILE" "$NEW_NAME"
          echo "üì¶ APK: $NEW_NAME"
        else
          echo "‚ùå √âchec de cr√©ation de l'APK (Code: $BUILD_EXIT_CODE)"
          echo ""
          echo "üìã Derni√®res 100 lignes du log complet:"
          tail -100 build.log
          exit 1
        fi
        
    - name: Upload APK
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: LeTousgestions-APK-${{ github.sha }}
        path: bin/*.apk
        retention-days: 30
        
    - name: Upload build log (on failure)
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: build-log-${{ github.sha }}
        path: build.log
        retention-days: 7
        
    - name: Upload full build log (always)
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: full-build-log-${{ github.sha }}
        path: build.log
        retention-days: 3
